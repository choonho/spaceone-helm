# deploy always
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-conf
  namespace: {{ .Values.namespace }}
data:
  init-db.js: |
    db = db.getSiblingDB('dev-identity')
    db.createUser(
        {
            user: "{{ .Values.mongo.username }}",
            pwd: "{{ .Values.mongo.password }}",
            roles: [ {role: "readWrite", db: "dev-identity" } ]
        }
    );

    db = db.getSiblingDB('dev-inventory')
    db.createUser(
        {
            user: "{{ .Values.mongo.username }}",
            pwd: "{{ .Values.mongo.password }}",
            roles: [ {role: "readWrite", db: "dev-inventory" } ]
        }
    );

    db = db.getSiblingDB('dev-repository')
    db.createUser(
        {
            user: "{{ .Values.mongo.username }}",
            pwd: "{{ .Values.mongo.password }}",
            roles: [ {role: "readWrite", db: "dev-repository" } ]
        }
    );

    db = db.getSiblingDB('dev-plugin')
    db.createUser(
        {
            user: "{{ .Values.mongo.username }}",
            pwd: "{{ .Values.mongo.password }}",
            roles: [ {role: "readWrite", db: "dev-plugin" } ]
        }
    );

    db = db.getSiblingDB('dev-secret')
    db.createUser(
        {
            user: "{{ .Values.mongo.username }}",
            pwd: "{{ .Values.mongo.password }}",
            roles: [ {role: "readWrite", db: "dev-secret" } ]
        }
    );

    db = db.getSiblingDB('dev-marketplace')
    db.createUser(
        {
            user: "{{ .Values.mongo.username }}",
            pwd: "{{ .Values.mongo.password }}",
            roles: [ {role: "readWrite", db: "dev-marketplace" } ]
        }
    );

    db = db.getSiblingDB('dev-statistics')
    db.createUser(
        {
            user: "{{ .Values.mongo.username }}",
            pwd: "{{ .Values.mongo.password }}",
            roles: [ {role: "readWrite", db: "dev-statistics" } ]
        }
    );